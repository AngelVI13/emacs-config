#+STARTUP: overview

* Emacs options
** Common
Emacs settings

#+BEGIN_SRC emacs-lisp

  ;; Allows for better interprogram clipboard integration                 
  (setq save-interprogram-paste-before-kill t)

  ;; Disables the bell ringing sound
  (setq ring-bell-function 'ignore)

  ;; Shows pretty symbols instead of some text
  ;; for example it will show the lambda symbol insteal of 'lambda'
  (global-prettify-symbols-mode t)

  ;; When the we are on the last line of the screen
  ;; continue scrolling line by line and not moving down
  ;; half a page
  (setq scroll-conservatively 100)

  ;; Automatically reload files that have been modified on the filesystem
  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil) ;; or this

  ;; Turn auto save off. e.g. periodically make recovery copy file named #filename#
  (setq auto-save-default nil) ; t for on, nil for off
  ;; Turn auto backup off e.g periodically make backup copy file name ~filename
  (setq make-backup-files nil)

  ;; Real autosave directly to file
  (use-package real-auto-save
    :ensure t)

  ;; Automatically start for programming modes
  (add-hook 'prog-mode-hook 'real-auto-save-mode)

  (setq real-auto-save-interval 30) ;; in seconds

  ;; Display time in the modeline
  (setq display-time-24hr-format t)
  (display-time-mode 1)

#+END_SRC
** try
  Package that allows you to 'try' a plugin without permanently installing it
  After restart of emacs, the package that was 'tried' will not be there

  #+BEGIN_SRC emacs-lisp
  
    (use-package try
      :ensure t)
  
  #+END_SRC
** Personal
Personal information

#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Angel ILIEV"
      user-mail-address "a.v.iliev13@gmail.com")

#+END_SRC

** config edit/reload
#+BEGIN_SRC emacs-lisp
  ;; Opens the config file for us
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/myinit.org"))

  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** kill all buffers
Kill all currently opened buffers

#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-k") 'kill-all-buffers)

#+END_SRC
* Load external files
  Defines a function to load external configuration lisp files
  
  #+BEGIN_SRC emacs-lisp

    (defun load-if-exists (f)
    "Load the elisp file only if it exists and is readable"
      (if (file-readable-p f)
          (load-file f)))

    ;(load-if-exists "~/some_file.el")
  
  #+END_SRC

* GUI options
** Common
Some common gui related options

#+BEGIN_SRC emacs-lisp

  ;; Enable selection highlighting and change color
  (transient-mark-mode t)
  (set-face-attribute 'region nil :background "#71719F")

  ;; Enable showing of matching parenthesis by default

  ; uncomment this if you wish to disable the short delay 
  ; before showing the matching parenthesis
  ;(setq show-paren-delay 0)
  (show-paren-mode 1)

  ;; Show column number by default
  (setq column-number-mode t)

  ;; Show line numbers on the left by default
  (global-linum-mode 1)  

  ;; Allows for multiline rigid shifting to left and right
  (defun shift-text (distance)
    (if (use-region-p)
        (let ((mark (mark)))
          (save-excursion
            (indent-rigidly (region-beginning)
                            (region-end)
                            distance)
            (push-mark mark t t)
            (setq deactivate-mark nil)))
      (indent-rigidly (line-beginning-position)
                      (line-end-position)
                      distance)))

  (defun shift-right (count)
    (interactive "p")
    (shift-text count))

  (defun shift-left (count)
    (interactive "p")
    (shift-text (- count)))

  (global-set-key (kbd "C-<") (lambda () (interactive) (shift-left 4)))
  (global-set-key (kbd "C->") (lambda () (interactive) (shift-right 4)))

  ;; Adds shortcut to eshell - F6
  (global-set-key (kbd "<f6>") 'eshell)

  ;; Use spaces instead of tabs
  (setq-default indent-tabs-mode nil)

  (global-set-key (kbd "C-c 1 c") 'comment-or-uncomment-region)

  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                (hs-minor-mode 1))))

  (global-set-key (kbd "C-c C-f") 'hs-toggle-hiding)

  ;; Highlights the current line and sets the highlight color
  (global-hl-line-mode t)
  (set-face-background 'hl-line "#006666")
  (set-face-foreground 'highlight nil)

  ;; A small animation when the cursor jumps between buffers
  ;; or across pages
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-color "#006666")
    )

  (toggle-scroll-bar -1)

  ;; If you type while there is a selected region, it will delet the region and replace it with the text
  (delete-selection-mode 1)

#+END_SRC

** which-key
  Brings up some help when key is pressed

  #+BEGIN_SRC emacs-lisp

    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))
  
  #+END_SRC
** ibuffer
  Use ibuffer instead of the traditional buffer. Adds highlighting and displays nicer
  
  #+BEGIN_SRC emacs-lisp 

    (defalias 'list-buffers 'ibuffer)

    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("org" (name . "^.*org$"))

                   ("web" (or (mode . web-mode) (mode . js2-mode)))
                   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("mu4e" (name . "\*mu4e\*"))
                   ("programming" (or
                                   (mode . python-mode)
                                   (mode . c++-mode)
                                   (mode . c-mode)
                                   (mode . go-mode)
                                   (mode . hexl-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")
                             (name . "^\\*Backtrace\\*$")))
                   ))))
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-auto-mode 1)
                (ibuffer-switch-to-saved-filter-groups "default")))

    ;; don't show these
                                            ;(add-to-list 'ibuffer-never-show-predicates "zowie")
    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)

  #+END_SRC

** Ace-window
  Window manager

  #+BEGIN_SRC emacs-lisp 

    ;; progn allows to call multiple functions within the initialization of a package
    (use-package ace-window
      :ensure t
      :init
      (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 2.0)))))
        )
      )

    (defun swap-windows ()
      "Swap windows and leave focus in original window."
      (interactive)
      (ace-swap-window)
      (aw-flip-window))

    (global-set-key (kbd "C-c w s") 'swap-windows)

    (defun split-and-follow-horizontally ()
      "Move cursor to the new split window down."
      (interactive)
      (split-window-below)
      (balance-windows)
      (other-window 1))

    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

    (defun split-and-follow-vertically ()
      "Move cursor to the new split window right."
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))

    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  #+END_SRC

** Linum-relative
Relative numbers package

#+BEGIN_SRC emacs-lisp

  (use-package linum-relative
    :ensure t)

  (add-hook 'prog-mode-hook 'linum-relative-mode)

#+END_SRC

** Hydra
This allows you to bring up quick access to different modes
and stay within those modes. For example by a key press you
can enter org-mode and get a list of options accessible by more
key presses

#+BEGIN_SRC emacs-lisp

  (use-package hydra 
    :ensure t
    :config
    ;; Hydra for modes that toggle on and off
    (defhydra hydra-toggle (:color blue)
      "toggle"
      ("a" abbrev-mode "abbrev")
      ("s" flyspell-mode "flyspell")
      ("d" toggle-debug-on-error "debug")
      ("c" fci-mode "fCi")
      ("f" auto-fill-mode "fill")
      ("t" toggle-truncate-lines "truncate")
      ("w" whitespace-mode "whitespace")
      ("q" nil "cancel"))

    ;; Hydra for music player actions
    (defhydra music-player-control (:color red)
      "music"
      ("l" bongo-playlist "playlist")
      ("n" bongo-play-next "next")
      ("p" bongo-play-previous "prev")
      ("r" bongo-play-random "random")
      ("h" bongo-show "show playing")
      ("t" bongo-stop "stop")
      ("s" bongo-play "start")
      ("c" bongo-pause/resume "pause/resume")
      ("q" nil "cancel"))

    ;; Hydra for navigation. Allows for number input, i.e. 5p -> go up 5 lines
    (defhydra hydra-gotoline 
      ( :pre (linum-mode 1)
             :post (linum-mode 1))
      "goto"
      ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
      ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
      ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
      ("e" (lambda () (interactive)(end-of-buffer)) "end")
      ("c" recenter-top-bottom "recenter")
      ("v" (lambda () (interactive (next-line (/ (window-height (selected-window)) 2)))) "half-page down")
      ("f" (lambda () (interactive (previous-line (/ (window-height (selected-window)) 2)))) "half-page up")
      ("n" next-line "down")
      ("p" previous-line "up")
      ("g" goto-line "goto-line")
      ("q" nil "cancel"))

    ;; Hydra for some org-mode stuff
    (defhydra hydra-global-org (:color blue)
      "Org"
      ("t" org-timer-start "Start Timer")
      ("s" org-timer-stop "Stop Timer")
      ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
      ("p" org-timer "Print Timer") ; output timer value to buffer
      ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
      ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
      ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
      ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
      ("l" (or )rg-capture-goto-last-stored "Last Capture")
      ("q" nil "cancel"))

    ;; Hydra for moving window splitter
    (defhydra hydra-splitter (:color red)
      "splitter"
      ("<left>" (lambda () (interactive) (hydra-move-splitter-left 3)) "left")
      ("<down>" (lambda () (interactive) (hydra-move-splitter-down 3)) "down")
      ("<up>" (lambda () (interactive) (hydra-move-splitter-up 3)) "up")
      ("<right>" (lambda () (interactive) (hydra-move-splitter-right 3)) "right")
      ("q" nil "cancel"))

    (defhydra dumb-jump-hydra (:color blue)
      "Dumb Jump"
      ("j" dumb-jump-go "Go")
      ("o" dumb-jump-go-other-window "Other window")
      ("e" dumb-jump-go-prefer-external "Go external")
      ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
      ("i" dumb-jump-go-prompt "Prompt")
      ("l" dumb-jump-quick-look "Quick look")
      ("b" dumb-jump-back "Back")
      ("q" nil "cancel"))

    (defhydra engine-mode-hydra (:color blue)
      "Engine mode"
      ("m" engine/search-mail "mail")
      ("g" engine/search-google "google")
      ("e" engine/search-emacswiki "emacswiki")
      ("q" nil "cancel"))

    )

  (global-set-key (kbd "C-c o")    'hydra-global-org)
  (global-set-key (kbd "C-c h t")  'hydra-toggle/body)
  (global-set-key (kbd "C-c h g")  'hydra-gotoline/body)
  (global-set-key (kbd "C-c h m")  'music-player-control/body)
  (global-set-key (kbd "C-c h s")  'hydra-splitter/body)
  (global-set-key (kbd "C-c h d")  'dumb-jump-hydra/body)
  (global-set-key (kbd "C-c h e")  'engine-mode-hydra/body)

  ;;* Helpers
  (use-package windmove
    :ensure t)

  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

#+END_SRC

** Window divider
Enables window divider

#+BEGIN_SRC emacs-lisp

  ;; window dividers
  (window-divider-mode t)
  (setq window-divider-default-right-width 2)

#+END_SRC

** Hightlight indentaion
Hightlights indentation level

#+BEGIN_SRC emacs-lisp

  ;; Start the mode automatically in most programming modes (Emacs 24 and above):
  ;; (add-hook 'prog-mode-hook 
  ;;           (lambda ()
  ;;             (highlight-indentation-mode)
  ;;             (set-face-background 'highlight-indentation-face "#444444")
  ;;             (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")))

#+END_SRC

** Dired
Directory browsing tool. Download .el file from [[https://www.emacswiki.org/emacs/DiredPlus][EmacsWiki]]
Once downloaded run setup-diredp to enable dired+ functionality

#+BEGIN_SRC emacs-lisp

  (defun setup-diredp()
    "Loads dired+.el and configs some display settings"
    (interactive)
    ;; The dired+ package has to be installed manually
    ;; By downloading from the EmacsWiki(see above)
    (if (file-readable-p "~/.emacs.d/lisp/dired+.el")
        (progn ;; progn is needed in order to exec multiple statements
          (load-file "~/.emacs.d/lisp/dired+.el")
          ;; Shows shortened version of the files i.e. only name and ext.
          (setq diredp-hide-details-initially-flag nil)))
    )

    ;; If dired++.el file exists then load it and set some configuration for it.
    (setup-diredp)

    ;; Better support for regexp
    (use-package pcre2el
      :ensure t
      :config 
      (pcre-mode)
      )

    ;; The two packages below expand the Counsel/Ivy functionality
    (use-package wgrep
      :ensure t
      )

    ;; For this to work you need to install the fzf package!!!!!!!!!!!
    ;; Fzf source: https://github.com/junegunn/fzf
    ;; Consider installing WSL on windows https://docs.microsoft.com/en-us/windows/wsl/install-win10
    (setq counsel-fzf-cmd "fzf -f %s")

#+END_SRC

** Scroll half-page
Half page scroll implementation

#+BEGIN_SRC emacs-lisp

  ;; Scrolls down half a page and moves cursor
  (global-set-key [(control ?v)]
                  (lambda () (interactive (next-line (/ (window-height (selected-window)) 2)))))

  ;; Scrolls up half a page and moves cursor
  (global-set-key [(control shift ?v)]
                  (lambda () (interactive (previous-line (/ (window-height (selected-window)) 2)))))

#+END_SRC

** Adjust opacity of emacs
Adjust opacity of the emacs window 

#+BEGIN_SRC emacs-lisp

  (defun sanityinc/adjust-opacity (frame incr)
    (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
           (newalpha (+ incr oldalpha)))
      (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
        (modify-frame-parameters frame (list (cons 'alpha newalpha))))))
  (global-set-key (kbd "M-C-8") (lambda () (interactive) (sanityinc/adjust-opacity nil -2)))
  (global-set-key (kbd "M-C-9") (lambda () (interactive) (sanityinc/adjust-opacity nil 2)))
  (global-set-key (kbd "M-C-0") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))

#+END_SRC

** Emacs font
Sets default emacs font size

#+BEGIN_SRC emacs-lisp

  (set-face-attribute 'default nil
                      :font "Monospace"
                      :height 100
                      :weight 'bold
                      )

#+END_SRC
** Spaceline
Modeline improvement for emacs

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

** Diminish 
Hide minor modes from modeline

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode)
    (diminish 'subword-mode)
    (diminish 'smartparens-mode))
#+END_SRC
** Dashboard
Show a dashboard with recent files etc.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Happy Developing, Angel"))
#+END_SRC
* External tools
** Google translate
This enables translation of text straight from within Emacs

#+BEGIN_SRC emacs-lisp

  (use-package google-translate
    :ensure t
    :config
    (setq-default google-translate-default-target-language "en")
    (setq-default google-translate-default-source-language "auto")
    ;;; Bind is run before config and thus the above settings don't work
    ;;:bind (("C-c t" . google-translate-at-point)
    ;;       ("C-c T" . google-translate-query-translate))
    )
    
  ;; You can use these instead but its better to use the above
  (global-set-key "\C-ct" 'google-translate-at-point)
  (global-set-key "\C-cT" 'google-translate-query-translate)

#+END_SRC

** Bongo music player
Small music player. Github page with info and shortcut descriptions [[https://github.com/dbrock/bongo/tree/3d246be1e8d14865f5253567ab8fee5d4e9c470c][Bongo]]

#+BEGIN_SRC emacs-lisp

  (use-package bongo
    :ensure t)

  ;; For windows you have to download and put mplayer.exe on Path
  ;; This is needed since I coudln't get vlc to work on Windows
  (defun load-mplayer-backend()
    "Loads the mplayer backend. Use this for windows"
    (interactive)
    (setq-default bongo-enabled-backends '(mplayer)))

#+END_SRC

** Pandoc file import/exporter
A file importer/exporter from org file to any other file format and vice versa
Requirements for this package: install pandoc >=1.13 [[https://pandoc.org/installing.html][Pandoc page]]
In order to get an org file from other files, type in the following shell cmd:

pandoc -o output_name.org -f input_format -t org input_filename.extension

for example:

pandoc -o test.org -f html -t org test.html

#+BEGIN_SRC emacs-lisp

  (use-package ox-pandoc
    :ensure t)

  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)))
  ;; cancel above settings only for 'docx' format
  (setq org-pandoc-options-for-docx '((standalone . nil)))
  ;; special settings for beamer-pdf and latex-pdf exporters
  (setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
  (setq org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex")))

#+END_SRC

** Engine-mode
Search through google, mail, websites etc from Emacs

#+BEGIN_SRC emacs-lisp

  (use-package engine-mode
    :ensure t
    :config
    (progn
      (defengine mail "https://mail.google.com/mail/u/0/#search/%s" :keybinding "m")
      (defengine google "http://google.com/search?q=%s" :keybinding "g")
      (defengine emacswiki "http://google.com/search?q=site:emacswiki.org+%s" :keybinding "e")
      ;;(bind-key* "C-c /" 'engine-mode-hydra/body)
      (engine-mode)))

#+END_SRC

** Weather
Weather forecast for city

#+BEGIN_SRC emacs-lisp

  ;; weather from wttr.in
  (use-package wttrin
    :ensure t
    :commands (wttrin)
    :init
    (progn
      (setq wttrin-default-cities '("Vilnius"
                                    "Ruse"))
      (setq wttrin-default-accept-language '("Accept-Language" . "en-GB"))))

  (global-set-key (kbd "C-c f") 'wttrin)

#+END_SRC

* Filetype styles
** C/C++ style
   Set default indentation style for c/c++ files

   #+BEGIN_SRC emacs-lisp

     (setq c-default-style "stroustrup"
          c-basic-offset 4)

   #+END_SRC
* Programming
** Smartparens
#+BEGIN_SRC emacs-lisp

  (use-package smartparens
    :ensure t
    :bind (("<C-s-right>" . sp-forward-sexp)
           ("<C-s-left>" . sp-backward-sexp)
           ("<C-s-up>" . sp-up-sexp)
           ("<C-s-down>" . sp-down-sexp)
           ("M-]" . sp-unwrap-sexp)
           ("M-[" . sp-backward-unwrap-sexp)
           ("C-M-t" . sp-transpose-sexp)))

  (setq-default smartparens-mode t)

  ;; The functions below define wrapping of word/pairs under
  ;; the cursor with various stuff - parens, brackets, quotes etc.
  ;; loop is replace with cl-loop cause my linux machine has an older
  ;; version of emacs -> backward compatibility
  (defmacro def-pairs (pairs)
    `(progn
       ,@(cl-loop for (key . val) in pairs
               collect
               `(defun ,(read (concat
                               "wrap-with-"
                               (prin1-to-string key)
                               "s"))
                    (&optional arg)
                  (interactive "p")
                  (sp-wrap-with-pair ,val)))))

  (def-pairs ((paren . "(")
              (bracket . "[")
              (brace . "{")
              (single-quote . "'")
              (double-quote . "\"")
              (back-quote . "`")))

  (global-set-key (kbd "C-c (") 'wrap-with-parens)
  (global-set-key (kbd "C-c [") 'wrap-with-brackets)
  (global-set-key (kbd "C-c {") 'wrap-with-braces)
  (global-set-key (kbd "C-c \"") 'wrap-with-double-quotes)

#+END_SRC

Automatically wrap/rewrap code with ..., expand/contract pairs etc
You can run M-x sp-cheat-sheet to see all available commands and exmp.
  
** Emmet mode
!Check out emmet mode for rapid web dev
** Flycheck
  On the fly syntax check for a huge number of languages: python, c/c++, java etc
  
  #+BEGIN_SRC emacs-lisp
  
  (use-package flycheck
    :ensure t
    :init 
    (global-flycheck-mode t)) 
  
  #+END_SRC
** Golang
Golang support

#+BEGIN_SRC emacs-lisp

  (use-package go-mode
    :ensure t)
  ;;(go-mode-autoloads)

#+END_SRC
** Python
*** Setup python interpreter
Sets up python interpreter
 
#+BEGIN_SRC emacs-lisp

  (setq py-python-command "python2.7")
  (setq python-shell-interpreter "python2.7")

#+END_SRC

*** Elpy
   Package that enables python IDE-like features
   NOTE: also check out the python requirements for elpy here:
   [[https://github.com/jorgenschaefer/elpy][Github Elpy]]

   #+BEGIN_SRC emacs-lisp

     ;; (use-package elpy
     ;;   :ensure t
     ;;   :config 
     ;;   (elpy-enable))

   #+END_SRC

*** Hooks
Python Hooks

#+BEGIN_SRC emacs-lisp

  ;; (add-hook 'python-mode-hook (lambda () (auto-complete-mode -1)))

#+END_SRC

** Ggtags

Tags for code navigation

!!! Note2: In order to use ggtags you have to install the 'global' 
package (apt-get linux, win - http://adoxa.altervista.org/global/)

#+BEGIN_SRC emacs-lisp

  ;; tags for code navigation
  (use-package ggtags
    :ensure t
    :config 
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1))))
    )

  (global-set-key (kbd "M-*") 'ggtags-prev-mark)

#+END_SRC
** Yasnippet
  Includes popular snippets for python, c/c++, java etc
  
  #+BEGIN_SRC emacs-lisp
    
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))
  
  #+END_SRC
** Dump-jump
Similar functionality to ggtags i.e. jump to declaration/usage etc
Works for multiple languages

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :ensure)

#+END_SRC
** Projectile
Enables management of multiple projects

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :ensure t)
  (counsel-projectile-mode)

  ;;(add-to-list 'projectile-globally-ignored-directories "*templates/cache")
  (add-to-list 'projectile-globally-ignored-files "*.map")

#+END_SRC

** Web-mode
Mode that provides autocompletion, tags matching, etc. for web dev

  #+BEGIN_SRC emacs-lisp

    (use-package web-mode
    :ensure t
    :config
	 (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	 (setq web-mode-engines-alist
	       '(("django"    . "\\.html\\'")))
	 (setq web-mode-ac-sources-alist
	       '(("css" . (ac-source-css-property))
		 ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    
    (setq web-mode-enable-auto-closing t))
    (setq web-mode-enable-auto-quoting t)
  
  #+END_SRC
* Org
** basic config

#+BEGIN_SRC emacs-lisp
  ;; This makes sure that the src code editting is in the current window and
  ;; not in a new window
  (setq org-src-window-setup 'current-window)

  ;; This sets up a new template that automatically inserts an
  ;; emacs-lisp src block after typing <el and TAB
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Org-mode
  Install org mode for note taking, todos, tasks, presentations and many more.

  #+BEGIN_SRC emacs-lisp

    (use-package org
      :mode (("\\.org$" . org-mode))
      :ensure org-plus-contrib
      :config
      (progn
        ;; config stuff
        (setq org-support-shift-select t)
        ))

    (setenv "BROWSER" "firefox-browser")

    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (custom-set-variables
     '(org-directory "~/Dropbox/orgfiles")
     '(org-default-notes-file (concat org-directory "/notes.org"))
     '(org-export-html-postamble nil)
     '(org-hide-leading-stars t)
     '(org-startup-folded (quote overview))
     '(org-startup-indented t)
     )

    (setq org-file-apps
          (append '(
                    ("\\.pdf\\'" . "evince %s")
                    ) org-file-apps ))

    (global-set-key "\C-ca" 'org-agenda)

    (use-package org-ac
      :ensure t
      :init (progn
              (require 'org-ac)
              (org-ac/config-default)
              ))

    (global-set-key (kbd "C-c c") 'org-capture)

    (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                                 "~/Dropbox/orgfiles/index.org"
                                 ;"~/Dropbox/orgfiles/schedule.org"
                                 ))

    (setq org-tag-alist '(("WORK")
                          ("SPORT")
                          ("PROJECTS")
                          ("BOOK")
                          ("MISC")))

    (setq org-capture-templates
          '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
             "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
            ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
             "* Note %?\n%T")
            ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
             "* %? %^L %^g \n%T" :prepend t)
            ("b" "Book idea" entry (file+headline "~/Dropbox/orgfiles/index.org" "Book ideas")
             "* %?\n%T" :prepend t)
            ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/index.org" "To Do")
             "* TODO %?\nSCHEDULED: %^t\n%^G" :prepend t)))

    ;; using %i in the template above allows you to insert a selected text
    ;; when C-c c is pressed

    (defadvice org-capture-finalize 
        (after delete-capture-frame activate)  
      "Advise capture-finalize to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))

    (defadvice org-capture-destroy 
        (after delete-capture-frame activate)  
      "Advise capture-destroy to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))  

    (use-package noflet
      :ensure t )

    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
        (org-capture)))

    (setq package-check-signature nil)


    (use-package org-gcal
      :ensure t
      :config
      (setq org-gcal-client-id "860194293573-uienoduetdjfm6q6njtceid57sg7j7rp.apps.googleusercontent.com"
            org-gcal-client-secret "Rn33L6iU9yCHpSisy_zsJxUb"
            org-gcal-file-alist '(("a.v.iliev13@gmail.com" .  "~/Dropbox/orgfiles/gcal.org"))))

    (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
    (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

  #+END_SRC
** Org-reveal
Tool for making presentations. Look at RawGit for hosting gitpages!!
An example presentation can be found here [[https://revealjs.com/#/][Example]]

#+BEGIN_SRC emacs-lisp

  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ;; The below line is to display Latex nicely
  (setq org-reveal-mathjax t)

  ;; html syntax highlighting
  (use-package htmlize
    :ensure t)

#+END_SRC

* Text editing & navigation
** Markdown-mode
Markdown mode for emacs. Documentation can be found here [[https://github.com/jrblevin/markdown-mode/tree/668de4a965980d618637a3b5754e721b54c51e83][Github page]]

#+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

#+END_SRC

** Swiper & Counsel
  Incremental search

  !!! Note: In order to use counsel-ag you have to install 
  the silversearcher-ag package (apt-get linux, win - [[https://blog.kowalczyk.info/software/the-silver-searcher-for-windows.html][Link]])

  #+BEGIN_SRC emacs-lisp

    ;; it looks like counsel is a requirement for swiper
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
        :map ivy-minibuffer-map
        ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))


    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
             ("C-r" . swiper)
             ("C-c C-r" . ivy-resume)
             ("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
        ))

    (use-package ag
      :ensure t)

    (use-package wgrep-ag
      :ensure t)

  #+END_SRC
** Avy
  Go to word starting with a letter entered by user

  #+BEGIN_SRC emacs-lisp 

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-word-1))

  #+END_SRC
** Evil
  Vim support for emacs

  #+BEGIN_SRC emacs-lisp

    ;;(require 'evil)
    ;;  (evil-mode 1)
  
  #+END_SRC
** Iedit and narrow/widen dwim
  These plugins allow for easier and more powerful editting by enabling
  multiple occurance editting and narrowing/expanding of selection to edit

  #+BEGIN_SRC emacs-lisp

    ;; Narrow selection for editting and only perform operations
    ;; on that part of the text without affecting the full text
    ;; keybinding is C-x n
    (defun narrow-or-widen-dwim (p)
      "Widen if buffer is narrowed, narrow-dwim otherwise.
	Dwim means: region, org-src-block, org-subtree, or
	defun, whichever applies first. Narrowing to
	org-src-block actually calls `org-edit-src-code'.

      With prefix P, don't widen, just narrow even if buffer
       is already narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
	    ((region-active-p)
	     (narrow-to-region (region-beginning)
			       (region-end)))
	    ((derived-mode-p 'org-mode)
	     ;; `org-edit-src-code' is not a real narrowing
	     ;; command. Remove this first conditional if
	     ;; you don't want it.
	     (cond ((ignore-errors (org-edit-src-code) t)
		    (delete-other-windows))
		   ((ignore-errors (org-narrow-to-block) t))
		   (t (org-narrow-to-subtree))))
	    ((derived-mode-p 'latex-mode)
	     (LaTeX-narrow-to-environment))
	    (t (narrow-to-defun))))

    ;; This line actually replaces Emacs' entire narrowing
    ;; keymap, that's how much I like this command. Only
    ;; copy it if that's what you want.
    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(define-key LaTeX-mode-map "\C-xn"
		  nil)))

  #+END_SRC
** Undo Tree
  Shows a visual representation of your edit history
  That looks like the roots of a tree so you can visually
  navigate through your changes

  #+BEGIN_SRC emacs-lisp
  
    (use-package undo-tree
      :ensure t
      :init
        (global-undo-tree-mode))
  
  #+END_SRC
** Hungry delete
Deletes multiple empty lines and extra spaces

#+BEGIN_SRC emacs-lisp

  (use-package hungry-delete
    :ensure t
    ;; Do not enable by default cause its annoying
    :config
    (global-hungry-delete-mode)
    )

#+END_SRC

** Aggressive Indent
Easily adjusts indentation with tab key

    #+BEGIN_SRC emacs-lisp

      ;; Disable electric-indent-mode
      (electric-indent-mode -1)
      ;; Disable electric-indent-mode if set by any other major mode
      (add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))

      (use-package aggressive-indent
        :ensure t
        :config
        (global-aggressive-indent-mode 1))

    #+END_SRC

** Expand region
Select an ever expanding region of text

#+BEGIN_SRC emacs-lisp

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

#+END_SRC
** Auto-complete
  Autocompletion package

  #+BEGIN_SRC emacs-lisp

    ;; (use-package auto-complete
    ;;   :ensure t
    ;;   :init
    ;;   (progn
    ;;     (ac-config-default)
    ;;     (global-auto-complete-mode t)
    ;;     ))

  #+END_SRC

** Company
Auto-complete for emacs

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  ;; Install company autocompletion for python
  ;; (use-package company-jedi
  ;;   :ensure t)

  ;; ;; add a hook for python mode
  ;; (defun my/python-mode-hook ()
  ;;   (add-to-list 'company-backends 'company-jedi))

  ;; (add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC
** Move-text
Move line/selected region up/down

#+BEGIN_SRC emacs-lisp

  (use-package move-text
    :ensure t
    :bind
    (([(meta up)] . move-text-up)
     ([(meta down)] . move-text-down)))

#+END_SRC
** Multiple-cursors
Similar to iedit adds multiple cursors at keyword or occurance of selection
The keybindings for this are defined in a Hydra: C-;

#+BEGIN_SRC emacs-lisp

  (use-package multiple-cursors
    :ensure t)

  (global-set-key (kbd "C-;") 'mc/mark-more-like-this-extended)

#+END_SRC
** Smart-move-beginning-of-line
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

#+BEGIN_SRC emacs-lisp

  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)

#+END_SRC

** Global subword
Instead of jumping back and forth on whole words do the same with subwords

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Electric pairs
Add matching pair for (), {}, "" etc.

#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))

  (electric-pair-mode t)
#+END_SRC
** Kill whole word
Kill whole word irrespective of where you are inside a word

#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** Copy whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
* Emacs useful key combinations
** Recenter view: C-l
** Undo & Redo: C-/ , C-Shift-/
** Toggle narrow to selection: C-x n
** Expand region of selection: C-=
** Execute lisp command: C-x C-e
** Toggle multiple cursors to edit instances of selection: C-;
** To enter/exit org capture screen: C-c c | C-c C-c
** Open link in browser: C-c C-o
** Link syntax is [[url][description] *] (without the star)
** Export org file: C-c C-e
** Make long line of text into paragraph: M-Q
** Search for text: C-Shift-s
** Jump forward/backward a word: M-f / M-b
** View google agenda + to do list: C-c a c
** To replace values in a column (rectangle): C-x r t
** To insert values in a column (rectangle): *string-insert-rectangle*
** To open up a better-shell: C-'
** Hydra - toggle mode: <chord> tt
** Hydra - navigation mode: <chord> gg
** Hydra - org mode: C-c t
** To search for word after cursor (repeat M-j to add more words): C-s M-j
** Indent text block lefr/right: C-< / C->
** Open emacs shell: F6
** Hydra - move window splitter around: <chord> rs
** Ggtags go to definition / return from definition: M-. / M-*
** To search all files for a string/regex: counsel-ag (type C-c C-o to 
get all results in a buffer so you can quickly navigate
** Projectile - search all project files: C-c p s s / C-c p s g
** Projectile - find all occurance of regexp in project: C-c p o
** Projectile - dicover projects using the projectile-discover...
** Dump-jump(hydra) - jump to definition/usage (multiple languages): <chord> dd
** Toggle code folding (now set up only for c/c++ & java): C-c @ C-c
** Google translate some text: C-c T
** Google translate the word under the cursor: C-c t
** Navigate on sexp: C-M-<arrow keys>
** Wrap word/pairs under cursor with (,[,{," : C-c ( / [ / { / "
** Transpose expression (i.e. a == b -> b == a): C-M-t
** Unwrap sexp: M-[
** Move text/region up/down: M-up / M-down
** Hydra music player: <chord> jp
** Open dired of the dir. inside which the file in your buffer is located: C-x C-j 
** Scroll down/up half a page and move cursor: C-v / C-Shift-v
** In order to eddit a search buffer and thus edit all results from search: C-c C-p
** To apply changes from above operation (search buffer edditing): C-c C-e 
** Comment-uncomment a block of text: C-c 1 c
** Convert region to lowercase/uppercase: C-x C-l / C-x C-u
** Convert word to lowercase/uppercase/capitalize: M-l / M-u / M-c
** Hydra - window movement & operations: <chord> ww
** Incr/decrease font-size (can be used with multiple cmds i.e <f2> g l g g etc): <f2> g / <f2> l
** Adjust opacity of emacs: C-M-8 (decrease) / C-M-9 (increase) / C-M-10 (reset to 100)
** Search google, gmail or other websites: <chord> sd
** Show weather forecast: C-c f
