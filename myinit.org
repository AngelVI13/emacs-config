
#+STARTIP: overview

* try
  Package that allows you to 'try' a plugin without permanently installing it
  After restart of emacs, the package that was 'tried' will not be there

  #+BEGIN_SRC emacs-lisp
  
    (use-package try
      :ensure t)
  
  #+END_SRC

* Org-mode
  Install org mode for note taking, todos, tasks, presentations and many more.

  #+BEGIN_SRC emacs-lisp

    (use-package org
      :mode (("\\.org$" . org-mode))
      :ensure org-plus-contrib
      :config
      (progn
	;; config stuff
	))

    (setenv "BROWSER" "firefox-browser")

    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (custom-set-variables
     '(org-directory "~/orgfiles")
     '(org-default-notes-file (concat org-directory "/notes.org"))
     '(org-export-html-postamble nil)
     '(org-hide-leading-stars t)
     '(org-startup-folded (quote overview))
     '(org-startup-indented t)
     )

    (setq org-file-apps
	  (append '(
		    ("\\.pdf\\'" . "evince %s")
		    ) org-file-apps ))

    (global-set-key "\C-ca" 'org-agenda)

    (use-package org-ac
      :ensure t
      :init (progn
	      (require 'org-ac)
	      (org-ac/config-default)
	      ))

    (global-set-key (kbd "C-c c") 'org-capture)

    (setq org-agenda-files (list "~/orgfiles/gcal.org"
                                 "~/orgfiles/index.org"
				   "~/orgfiles/schedule.org"))
    (setq org-capture-templates
	  '(("a" "Appointment" entry (file+headline "~/orgfiles/gcal.org" "Appointments")
	     "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
	    ("n" "Note" entry (file+headline "~/orgfiles/notes.org" "Notes")
	     "* Note %?\n%T")
	    ("l" "Link" entry (file+headline "~/orgfiles/links.org" "Links")
	     "* %? %^L %^g \n%T" :prepend t)
	    ("b" "Book idea" entry (file+headline "~/orgfiles/index.org" "Book ideas")
	     "* %?\n%T" :prepend t)
	    ("t" "To Do Item" entry (file+headline "~/orgfiles/index.org" "To Do Items")
	     "* %?\n%T" :prepend t)))
             
    ;; using %i in the template above allows you to insert a selected text
    ;; when C-c c is pressed

    (defadvice org-capture-finalize 
	(after delete-capture-frame activate)  
      "Advise capture-finalize to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
	  (delete-frame)))

    (defadvice org-capture-destroy 
	(after delete-capture-frame activate)  
      "Advise capture-destroy to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
	  (delete-frame)))  

    (use-package noflet
      :ensure t )

    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
	      (org-capture)))

  #+END_SRC

* which-key
  Brings up some help when key is pressed

  #+BEGIN_SRC emacs-lisp

    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))
  
  #+END_SRC
  
* org-bullets
  Makes bullets prettier in org-mode

  #+BEGIN_SRC emacs-lisp
  
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  #+END_SRC

* ibuffer
  Use ibuffer instead of the traditional buffer. Adds highlighting and displays nicer
  
  #+BEGIN_SRC emacs-lisp 
    
    (defalias 'list-buffers 'ibuffer)
  
  #+END_SRC
  
* Ace-window
  Window manager

  #+BEGIN_SRC emacs-lisp 

  ;; progn allows to call multiple functions within the initialization of a package
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
         '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 2.0))))) 
	 ))

  #+END_SRC

* Swiper & Counsel
  Incremental search

  #+BEGIN_SRC emacs-lisp

  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))


  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
  #+END_SRC

* Avy
  Go to word starting with a letter entered by user

  #+BEGIN_SRC emacs-lisp 

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-word-1))

  #+END_SRC

* Auto-complete
  Autocompletion package

  #+BEGIN_SRC emacs-lisp
  
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
  
  #+END_SRC

* Flycheck
  On the fly syntax check for a huge number of languages: python, c/c++, java etc
  
  #+BEGIN_SRC emacs-lisp
  
  (use-package flycheck
    :ensure t
    :init 
    (global-flycheck-mode t)) 
  
  #+END_SRC

* Python
** Setup Jedi autocompletion
    Jedi autocompletion. Similar functionality is contained inside Elpy

    #+BEGIN_SRC emacs-lisp
      
    ;  (use-package jedi
    ;    :ensure t
    ;    :init
    ;     (add-hook 'python-mode-hook 'jedi:setup)
    ;     (add-hook 'python-mode-hook 'jedi:ac-setup))
  
    #+END_SRC

** Setup python interpreter
    Sets up python interpreter
 
    #+BEGIN_SRC emacs-lisp
      
      (setq py-python-command "python")
      (setq python-shell-interpreter "python")
   
    #+END_SRC

** Elpy
   Package that enables python IDE-like features

   #+BEGIN_SRC emacs-lisp
   
     (use-package elpy
       :ensure t
       :config 
         (elpy-enable))
   
   #+END_SRC

* Yasnippet
  Includes popular snippets for python, c/c++, java etc
  
  #+BEGIN_SRC emacs-lisp
    
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))
  
  #+END_SRC

* Nlinum-relative
  Relative numbers

  #+BEGIN_SRC emacs-lisp

    ;;(use-package nlinum-relative
    ;;  :config
    ;;  ;; something else you want
    ;;  (nlinum-relative-setup-evil)
    ;;  (add-hook 'prog-mode-hook 'nlinum-relative-mode))

    ;;(require 'nlinum-relative)
    ;;(nlinum-relative-setup-evil)                    ;; setup for evil
    ;;(add-hook 'prog-mode-hook 'nlinum-relative-mode)
    ;;(setq nlinum-relative-redisplay-delay 0)      ;; delay
    ;;(setq nlinum-relative-current-symbol "")      ;; or "" for display current line number
    ;;(setq nlinum-relative-offset 0)                 ;; 1 if you want 0, 2, 3...

  #+END_SRC

* Evil
  Vim support for emacs

  #+BEGIN_SRC emacs-lisp

    ;;(require 'evil)
    ;;  (evil-mode 1)
  
  #+END_SRC

* Undo Tree
  Shows a visual representation of your edit history
  That looks like the roots of a tree so you can visually
  navigate through your changes

  #+BEGIN_SRC emacs-lisp
  
    (use-package undo-tree
      :ensure t
      :init
        (global-undo-tree-mode))
  
  #+END_SRC

* Misc packages
  
  #+BEGIN_SRC emacs-lisp

    ;; Highlights the current line
    (global-hl-line-mode t)

    ;; A small animation when the cursor jumps between buffers
    ;; or across pages
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      ; (setq beacon-color "#666600")
      )

    ;; deletes multiple empty lines and extra spaces
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    ;; easily adjusts indentation with tab key
    (use-package aggressive-indent
      :ensure t
      :config
      (global-aggressive-indent-mode 1))

    ;; Select an ever expanding region of text
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    ;; Allows for better interprogram clipboard integration		  
    (setq save-interprogram-paste-before-kill t)

    ;; Automatically reload files that have been modified on the filesystem
    (global-auto-revert-mode 1) ;; you might not want this
    (setq auto-revert-verbose nil) ;; or this		  

  #+END_SRC

* Iedit and narrow/widen dwim
  These plugins allow for easier and more powerful editting by enabling
  multiple cursor editting and narrowing/expanding of selection to edit

  #+BEGIN_SRC emacs-lisp

    ;; enables multiple cursors editting of selected text
    ;; use C-; to toggle it on/off
    (use-package iedit
      :ensure t)

    ;; Narrow selection for editting and only perform operations
    ;; on that part of the text without affecting the full text
    ;; keybinding is C-x n
    (defun narrow-or-widen-dwim (p)
      "Widen if buffer is narrowed, narrow-dwim otherwise.
	Dwim means: region, org-src-block, org-subtree, or
	defun, whichever applies first. Narrowing to
	org-src-block actually calls `org-edit-src-code'.

      With prefix P, don't widen, just narrow even if buffer
       is already narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
	    ((region-active-p)
	     (narrow-to-region (region-beginning)
			       (region-end)))
	    ((derived-mode-p 'org-mode)
	     ;; `org-edit-src-code' is not a real narrowing
	     ;; command. Remove this first conditional if
	     ;; you don't want it.
	     (cond ((ignore-errors (org-edit-src-code) t)
		    (delete-other-windows))
		   ((ignore-errors (org-narrow-to-block) t))
		   (t (org-narrow-to-subtree))))
	    ((derived-mode-p 'latex-mode)
	     (LaTeX-narrow-to-environment))
	    (t (narrow-to-defun))))

    ;(define-key endless/toggle-map "n"
    ;  #'narrow-or-widen-dwim)
    ;; This line actually replaces Emacs' entire narrowing
    ;; keymap, that's how much I like this command. Only
    ;; copy it if that's what you want.
    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(define-key LaTeX-mode-map "\C-xn"
		  nil)))

  #+END_SRC

* Web-mode
  Mode that provides autocompletion, tags matching, etc. for web dev

  #+BEGIN_SRC emacs-lisp

    (use-package web-mode
    :ensure t
    :config
	 (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	 (setq web-mode-engines-alist
	       '(("django"    . "\\.html\\'")))
	 (setq web-mode-ac-sources-alist
	       '(("css" . (ac-source-css-property))
		 ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    
    (setq web-mode-enable-auto-closing t))
    (setq web-mode-enable-auto-quoting t)
  
  #+END_SRC

* Load external files
  Defines a function to load external configuration lisp files
  
  #+BEGIN_SRC emacs-lisp

    (defun load-if-exists (f)
    "Load the elisp file only if it exists and is readable"
      (if (file-readable-p f)
          (load-file f)))

    ;(load-if-exists "~/some_file.el")
  
  #+END_SRC

* useful alternatives
  Alternatives to the packages described above

  #+BEGIN_SRC emacs-lisp

    ;(setq ido-enable-flex-matching t)
    ;(setq ido-everywhere t)
    ;(ido-mode 1)

    ; The following enables a tabbar with all opened buffers
    ;(use-package tabbar
    ;  :ensure t
    ;  :config (tabbar-mode 1)
    ;)

    ; Window manager
    ; Allows you to undo or redo window commands (i.e. reopen closed window etc)
    ; C-c-left /undo
    ; C-c-right /redo
    ;(winner-mode 1)

  #+END_SRC
* Emacs useful key combinations
** Recenter view: C-l
** Undo & Redo: C-/ , C-Shift-/
** Toggle narrow to selection: C-x n
** Expand region of selection: C-=
** Execute lisp command: C-x C-e
** Toggle multiple cursors to edit all instances of selection: C-;
** To enter/exit org capture screen: C-c c | C-c C-c
** Open link in browser: C-c C-o
** Link syntax is [[url][description] *] (without the star)
** Export org file: C-c C-e
